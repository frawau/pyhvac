# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _irhvac
else:
    import _irhvac

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (
        self.__class__.__module__,
        self.__class__.__name__,
        strthis,
    )


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)

    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)

    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""

    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())

    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""

    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr
    __swig_destroy__ = _irhvac.delete_SwigPyIterator

    def value(self):
        return _irhvac.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _irhvac.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _irhvac.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _irhvac.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _irhvac.SwigPyIterator_equal(self, x)

    def copy(self):
        return _irhvac.SwigPyIterator_copy(self)

    def next(self):
        return _irhvac.SwigPyIterator_next(self)

    def __next__(self):
        return _irhvac.SwigPyIterator___next__(self)

    def previous(self):
        return _irhvac.SwigPyIterator_previous(self)

    def advance(self, n):
        return _irhvac.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _irhvac.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _irhvac.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _irhvac.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _irhvac.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _irhvac.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _irhvac.SwigPyIterator___sub__(self, *args)


# Register SwigPyIterator in _irhvac:
_irhvac.SwigPyIterator_swigregister(SwigPyIterator)


class VectorOfInt(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def iterator(self):
        return _irhvac.VectorOfInt_iterator(self)

    def __nonzero__(self):
        return _irhvac.VectorOfInt___nonzero__(self)

    def __bool__(self):
        return _irhvac.VectorOfInt___bool__(self)

    def __len__(self):
        return _irhvac.VectorOfInt___len__(self)

    def __getslice__(self, i, j):
        return _irhvac.VectorOfInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _irhvac.VectorOfInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _irhvac.VectorOfInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _irhvac.VectorOfInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _irhvac.VectorOfInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _irhvac.VectorOfInt___setitem__(self, *args)

    def pop(self):
        return _irhvac.VectorOfInt_pop(self)

    def append(self, x):
        return _irhvac.VectorOfInt_append(self, x)

    def empty(self):
        return _irhvac.VectorOfInt_empty(self)

    def size(self):
        return _irhvac.VectorOfInt_size(self)

    def swap(self, v):
        return _irhvac.VectorOfInt_swap(self, v)

    def begin(self):
        return _irhvac.VectorOfInt_begin(self)

    def end(self):
        return _irhvac.VectorOfInt_end(self)

    def rbegin(self):
        return _irhvac.VectorOfInt_rbegin(self)

    def rend(self):
        return _irhvac.VectorOfInt_rend(self)

    def clear(self):
        return _irhvac.VectorOfInt_clear(self)

    def get_allocator(self):
        return _irhvac.VectorOfInt_get_allocator(self)

    def pop_back(self):
        return _irhvac.VectorOfInt_pop_back(self)

    def erase(self, *args):
        return _irhvac.VectorOfInt_erase(self, *args)

    def __init__(self, *args):
        _irhvac.VectorOfInt_swiginit(self, _irhvac.new_VectorOfInt(*args))

    def push_back(self, x):
        return _irhvac.VectorOfInt_push_back(self, x)

    def front(self):
        return _irhvac.VectorOfInt_front(self)

    def back(self):
        return _irhvac.VectorOfInt_back(self)

    def assign(self, n, x):
        return _irhvac.VectorOfInt_assign(self, n, x)

    def resize(self, *args):
        return _irhvac.VectorOfInt_resize(self, *args)

    def insert(self, *args):
        return _irhvac.VectorOfInt_insert(self, *args)

    def reserve(self, n):
        return _irhvac.VectorOfInt_reserve(self, n)

    def capacity(self):
        return _irhvac.VectorOfInt_capacity(self)

    __swig_destroy__ = _irhvac.delete_VectorOfInt


# Register VectorOfInt in _irhvac:
_irhvac.VectorOfInt_swigregister(VectorOfInt)
opmode_t_kOff = _irhvac.opmode_t_kOff
opmode_t_kAuto = _irhvac.opmode_t_kAuto
opmode_t_kCool = _irhvac.opmode_t_kCool
opmode_t_kHeat = _irhvac.opmode_t_kHeat
opmode_t_kDry = _irhvac.opmode_t_kDry
opmode_t_kFan = _irhvac.opmode_t_kFan
opmode_t_kLastOpmodeEnum = _irhvac.opmode_t_kLastOpmodeEnum
fanspeed_t_kAuto = _irhvac.fanspeed_t_kAuto
fanspeed_t_kMin = _irhvac.fanspeed_t_kMin
fanspeed_t_kLow = _irhvac.fanspeed_t_kLow
fanspeed_t_kMedium = _irhvac.fanspeed_t_kMedium
fanspeed_t_kHigh = _irhvac.fanspeed_t_kHigh
fanspeed_t_kMax = _irhvac.fanspeed_t_kMax
fanspeed_t_kMediumHigh = _irhvac.fanspeed_t_kMediumHigh
fanspeed_t_kLastFanspeedEnum = _irhvac.fanspeed_t_kLastFanspeedEnum
swingv_t_kOff = _irhvac.swingv_t_kOff
swingv_t_kAuto = _irhvac.swingv_t_kAuto
swingv_t_kHighest = _irhvac.swingv_t_kHighest
swingv_t_kHigh = _irhvac.swingv_t_kHigh
swingv_t_kMiddle = _irhvac.swingv_t_kMiddle
swingv_t_kLow = _irhvac.swingv_t_kLow
swingv_t_kLowest = _irhvac.swingv_t_kLowest
swingv_t_kUpperMiddle = _irhvac.swingv_t_kUpperMiddle
swingv_t_kLastSwingvEnum = _irhvac.swingv_t_kLastSwingvEnum
ac_command_t_kControlCommand = _irhvac.ac_command_t_kControlCommand
ac_command_t_kSensorTempReport = _irhvac.ac_command_t_kSensorTempReport
ac_command_t_kTimerCommand = _irhvac.ac_command_t_kTimerCommand
ac_command_t_kConfigCommand = _irhvac.ac_command_t_kConfigCommand
ac_command_t_kLastAcCommandEnum = _irhvac.ac_command_t_kLastAcCommandEnum
swingh_t_kOff = _irhvac.swingh_t_kOff
swingh_t_kAuto = _irhvac.swingh_t_kAuto
swingh_t_kLeftMax = _irhvac.swingh_t_kLeftMax
swingh_t_kLeft = _irhvac.swingh_t_kLeft
swingh_t_kMiddle = _irhvac.swingh_t_kMiddle
swingh_t_kRight = _irhvac.swingh_t_kRight
swingh_t_kRightMax = _irhvac.swingh_t_kRightMax
swingh_t_kWide = _irhvac.swingh_t_kWide
swingh_t_kLastSwinghEnum = _irhvac.swingh_t_kLastSwinghEnum


class state_t(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr
    protocol = property(_irhvac.state_t_protocol_get, _irhvac.state_t_protocol_set)
    model = property(_irhvac.state_t_model_get, _irhvac.state_t_model_set)
    power = property(_irhvac.state_t_power_get, _irhvac.state_t_power_set)
    mode = property(_irhvac.state_t_mode_get, _irhvac.state_t_mode_set)
    degrees = property(_irhvac.state_t_degrees_get, _irhvac.state_t_degrees_set)
    celsius = property(_irhvac.state_t_celsius_get, _irhvac.state_t_celsius_set)
    fanspeed = property(_irhvac.state_t_fanspeed_get, _irhvac.state_t_fanspeed_set)
    swingv = property(_irhvac.state_t_swingv_get, _irhvac.state_t_swingv_set)
    swingh = property(_irhvac.state_t_swingh_get, _irhvac.state_t_swingh_set)
    quiet = property(_irhvac.state_t_quiet_get, _irhvac.state_t_quiet_set)
    turbo = property(_irhvac.state_t_turbo_get, _irhvac.state_t_turbo_set)
    econo = property(_irhvac.state_t_econo_get, _irhvac.state_t_econo_set)
    light = property(_irhvac.state_t_light_get, _irhvac.state_t_light_set)
    filter = property(_irhvac.state_t_filter_get, _irhvac.state_t_filter_set)
    clean = property(_irhvac.state_t_clean_get, _irhvac.state_t_clean_set)
    beep = property(_irhvac.state_t_beep_get, _irhvac.state_t_beep_set)
    sleep = property(_irhvac.state_t_sleep_get, _irhvac.state_t_sleep_set)
    clock = property(_irhvac.state_t_clock_get, _irhvac.state_t_clock_set)
    command = property(_irhvac.state_t_command_get, _irhvac.state_t_command_set)
    iFeel = property(_irhvac.state_t_iFeel_get, _irhvac.state_t_iFeel_set)
    sensorTemperature = property(
        _irhvac.state_t_sensorTemperature_get, _irhvac.state_t_sensorTemperature_set
    )

    def __init__(self):
        _irhvac.state_t_swiginit(self, _irhvac.new_state_t())

    __swig_destroy__ = _irhvac.delete_state_t


# Register state_t in _irhvac:
_irhvac.state_t_swigregister(state_t)
cvar = _irhvac.cvar
kPeriodOffset = cvar.kPeriodOffset
kDutyDefault = cvar.kDutyDefault
kDutyMax = cvar.kDutyMax
kMaxAccurateUsecDelay = cvar.kMaxAccurateUsecDelay
kDefaultMessageGap = cvar.kDefaultMessageGap
kNoTempValue = cvar.kNoTempValue

ARRAH2E = _irhvac.ARRAH2E
ARDB1 = _irhvac.ARDB1
ARREB1E = _irhvac.ARREB1E
ARJW2 = _irhvac.ARJW2
ARRY4 = _irhvac.ARRY4
ARREW4E = _irhvac.ARREW4E
YAW1F = _irhvac.YAW1F
YBOFB = _irhvac.YBOFB
YX1FSF = _irhvac.YX1FSF
V9014557_A = _irhvac.V9014557_A
V9014557_B = _irhvac.V9014557_B
R_LT0541_HTA_A = _irhvac.R_LT0541_HTA_A
R_LT0541_HTA_B = _irhvac.R_LT0541_HTA_B
KKG9AC1 = _irhvac.KKG9AC1
KKG29AC1 = _irhvac.KKG29AC1
kPanasonicUnknown = _irhvac.kPanasonicUnknown
kPanasonicLke = _irhvac.kPanasonicLke
kPanasonicNke = _irhvac.kPanasonicNke
kPanasonicDke = _irhvac.kPanasonicDke
kPanasonicJke = _irhvac.kPanasonicJke
kPanasonicCkp = _irhvac.kPanasonicCkp
kPanasonicRkr = _irhvac.kPanasonicRkr
A907 = _irhvac.A907
A705 = _irhvac.A705
A903 = _irhvac.A903
TAC09CHSD = _irhvac.TAC09CHSD
GZ055BE1 = _irhvac.GZ055BE1
kVoltasUnknown = _irhvac.kVoltasUnknown
kVoltas122LZF = _irhvac.kVoltas122LZF
DG11J13A = _irhvac.DG11J13A
DG11J191 = _irhvac.DG11J191
GE6711AR2853M = _irhvac.GE6711AR2853M
AKB75215403 = _irhvac.AKB75215403
AKB74955603 = _irhvac.AKB74955603
AKB73757604 = _irhvac.AKB73757604
LG6711A20083V = _irhvac.LG6711A20083V
SAC_WREM2 = _irhvac.SAC_WREM2
SAC_WREM3 = _irhvac.SAC_WREM3
_IRREMOTEESP8266_VERSION_MAJOR = _irhvac._IRREMOTEESP8266_VERSION_MAJOR
_IRREMOTEESP8266_VERSION_MINOR = _irhvac._IRREMOTEESP8266_VERSION_MINOR
_IRREMOTEESP8266_VERSION_PATCH = _irhvac._IRREMOTEESP8266_VERSION_PATCH
_IRREMOTEESP8266_VERSION = _irhvac._IRREMOTEESP8266_VERSION
_IRREMOTEESP8266_VERSION_STR = _irhvac._IRREMOTEESP8266_VERSION_STR
_IRREMOTEESP8266_VERSION_ = _irhvac._IRREMOTEESP8266_VERSION_
_IR_ENABLE_DEFAULT_ = _irhvac._IR_ENABLE_DEFAULT_
DECODE_HASH = _irhvac.DECODE_HASH
SEND_RAW = _irhvac.SEND_RAW
DECODE_NEC = _irhvac.DECODE_NEC
SEND_NEC = _irhvac.SEND_NEC
DECODE_SHERWOOD = _irhvac.DECODE_SHERWOOD
SEND_SHERWOOD = _irhvac.SEND_SHERWOOD
DECODE_RC5 = _irhvac.DECODE_RC5
SEND_RC5 = _irhvac.SEND_RC5
DECODE_RC6 = _irhvac.DECODE_RC6
SEND_RC6 = _irhvac.SEND_RC6
DECODE_RCMM = _irhvac.DECODE_RCMM
SEND_RCMM = _irhvac.SEND_RCMM
DECODE_SONY = _irhvac.DECODE_SONY
SEND_SONY = _irhvac.SEND_SONY
DECODE_PANASONIC = _irhvac.DECODE_PANASONIC
SEND_PANASONIC = _irhvac.SEND_PANASONIC
DECODE_JVC = _irhvac.DECODE_JVC
SEND_JVC = _irhvac.SEND_JVC
DECODE_SAMSUNG = _irhvac.DECODE_SAMSUNG
SEND_SAMSUNG = _irhvac.SEND_SAMSUNG
DECODE_SAMSUNG36 = _irhvac.DECODE_SAMSUNG36
SEND_SAMSUNG36 = _irhvac.SEND_SAMSUNG36
DECODE_SAMSUNG_AC = _irhvac.DECODE_SAMSUNG_AC
SEND_SAMSUNG_AC = _irhvac.SEND_SAMSUNG_AC
DECODE_WHYNTER = _irhvac.DECODE_WHYNTER
SEND_WHYNTER = _irhvac.SEND_WHYNTER
DECODE_AIWA_RC_T501 = _irhvac.DECODE_AIWA_RC_T501
SEND_AIWA_RC_T501 = _irhvac.SEND_AIWA_RC_T501
DECODE_LG = _irhvac.DECODE_LG
SEND_LG = _irhvac.SEND_LG
DECODE_SANYO = _irhvac.DECODE_SANYO
SEND_SANYO = _irhvac.SEND_SANYO
DECODE_SANYO_AC = _irhvac.DECODE_SANYO_AC
SEND_SANYO_AC = _irhvac.SEND_SANYO_AC
DECODE_SANYO_AC88 = _irhvac.DECODE_SANYO_AC88
SEND_SANYO_AC88 = _irhvac.SEND_SANYO_AC88
DECODE_SANYO_AC152 = _irhvac.DECODE_SANYO_AC152
SEND_SANYO_AC152 = _irhvac.SEND_SANYO_AC152
DECODE_MITSUBISHI = _irhvac.DECODE_MITSUBISHI
SEND_MITSUBISHI = _irhvac.SEND_MITSUBISHI
DECODE_MITSUBISHI2 = _irhvac.DECODE_MITSUBISHI2
SEND_MITSUBISHI2 = _irhvac.SEND_MITSUBISHI2
DECODE_DISH = _irhvac.DECODE_DISH
SEND_DISH = _irhvac.SEND_DISH
DECODE_SHARP = _irhvac.DECODE_SHARP
SEND_SHARP = _irhvac.SEND_SHARP
DECODE_SHARP_AC = _irhvac.DECODE_SHARP_AC
SEND_SHARP_AC = _irhvac.SEND_SHARP_AC
DECODE_DENON = _irhvac.DECODE_DENON
SEND_DENON = _irhvac.SEND_DENON
DECODE_KELVINATOR = _irhvac.DECODE_KELVINATOR
SEND_KELVINATOR = _irhvac.SEND_KELVINATOR
DECODE_MITSUBISHI_AC = _irhvac.DECODE_MITSUBISHI_AC
SEND_MITSUBISHI_AC = _irhvac.SEND_MITSUBISHI_AC
DECODE_MITSUBISHI136 = _irhvac.DECODE_MITSUBISHI136
SEND_MITSUBISHI136 = _irhvac.SEND_MITSUBISHI136
DECODE_MITSUBISHI112 = _irhvac.DECODE_MITSUBISHI112
SEND_MITSUBISHI112 = _irhvac.SEND_MITSUBISHI112
DECODE_FUJITSU_AC = _irhvac.DECODE_FUJITSU_AC
SEND_FUJITSU_AC = _irhvac.SEND_FUJITSU_AC
DECODE_INAX = _irhvac.DECODE_INAX
SEND_INAX = _irhvac.SEND_INAX
DECODE_DAIKIN = _irhvac.DECODE_DAIKIN
SEND_DAIKIN = _irhvac.SEND_DAIKIN
DECODE_COOLIX = _irhvac.DECODE_COOLIX
SEND_COOLIX = _irhvac.SEND_COOLIX
DECODE_COOLIX48 = _irhvac.DECODE_COOLIX48
SEND_COOLIX48 = _irhvac.SEND_COOLIX48
DECODE_GLOBALCACHE = _irhvac.DECODE_GLOBALCACHE
SEND_GLOBALCACHE = _irhvac.SEND_GLOBALCACHE
DECODE_GOODWEATHER = _irhvac.DECODE_GOODWEATHER
SEND_GOODWEATHER = _irhvac.SEND_GOODWEATHER
DECODE_GREE = _irhvac.DECODE_GREE
SEND_GREE = _irhvac.SEND_GREE
DECODE_PRONTO = _irhvac.DECODE_PRONTO
SEND_PRONTO = _irhvac.SEND_PRONTO
DECODE_ARGO = _irhvac.DECODE_ARGO
SEND_ARGO = _irhvac.SEND_ARGO
DECODE_TROTEC = _irhvac.DECODE_TROTEC
SEND_TROTEC = _irhvac.SEND_TROTEC
DECODE_TROTEC_3550 = _irhvac.DECODE_TROTEC_3550
SEND_TROTEC_3550 = _irhvac.SEND_TROTEC_3550
DECODE_NIKAI = _irhvac.DECODE_NIKAI
SEND_NIKAI = _irhvac.SEND_NIKAI
DECODE_TOSHIBA_AC = _irhvac.DECODE_TOSHIBA_AC
SEND_TOSHIBA_AC = _irhvac.SEND_TOSHIBA_AC
DECODE_MAGIQUEST = _irhvac.DECODE_MAGIQUEST
SEND_MAGIQUEST = _irhvac.SEND_MAGIQUEST
DECODE_MIDEA = _irhvac.DECODE_MIDEA
SEND_MIDEA = _irhvac.SEND_MIDEA
DECODE_MIDEA24 = _irhvac.DECODE_MIDEA24
SEND_MIDEA24 = _irhvac.SEND_MIDEA24
DECODE_LASERTAG = _irhvac.DECODE_LASERTAG
SEND_LASERTAG = _irhvac.SEND_LASERTAG
DECODE_CARRIER_AC = _irhvac.DECODE_CARRIER_AC
SEND_CARRIER_AC = _irhvac.SEND_CARRIER_AC
DECODE_CARRIER_AC40 = _irhvac.DECODE_CARRIER_AC40
SEND_CARRIER_AC40 = _irhvac.SEND_CARRIER_AC40
DECODE_CARRIER_AC64 = _irhvac.DECODE_CARRIER_AC64
SEND_CARRIER_AC64 = _irhvac.SEND_CARRIER_AC64
DECODE_CARRIER_AC128 = _irhvac.DECODE_CARRIER_AC128
SEND_CARRIER_AC128 = _irhvac.SEND_CARRIER_AC128
DECODE_HAIER_AC = _irhvac.DECODE_HAIER_AC
SEND_HAIER_AC = _irhvac.SEND_HAIER_AC
DECODE_HITACHI_AC = _irhvac.DECODE_HITACHI_AC
SEND_HITACHI_AC = _irhvac.SEND_HITACHI_AC
DECODE_HITACHI_AC1 = _irhvac.DECODE_HITACHI_AC1
SEND_HITACHI_AC1 = _irhvac.SEND_HITACHI_AC1
DECODE_HITACHI_AC2 = _irhvac.DECODE_HITACHI_AC2
SEND_HITACHI_AC2 = _irhvac.SEND_HITACHI_AC2
DECODE_HITACHI_AC3 = _irhvac.DECODE_HITACHI_AC3
SEND_HITACHI_AC3 = _irhvac.SEND_HITACHI_AC3
DECODE_HITACHI_AC264 = _irhvac.DECODE_HITACHI_AC264
SEND_HITACHI_AC264 = _irhvac.SEND_HITACHI_AC264
DECODE_HITACHI_AC296 = _irhvac.DECODE_HITACHI_AC296
SEND_HITACHI_AC296 = _irhvac.SEND_HITACHI_AC296
DECODE_HITACHI_AC344 = _irhvac.DECODE_HITACHI_AC344
SEND_HITACHI_AC344 = _irhvac.SEND_HITACHI_AC344
DECODE_HITACHI_AC424 = _irhvac.DECODE_HITACHI_AC424
SEND_HITACHI_AC424 = _irhvac.SEND_HITACHI_AC424
DECODE_GICABLE = _irhvac.DECODE_GICABLE
SEND_GICABLE = _irhvac.SEND_GICABLE
DECODE_HAIER_AC_YRW02 = _irhvac.DECODE_HAIER_AC_YRW02
SEND_HAIER_AC_YRW02 = _irhvac.SEND_HAIER_AC_YRW02
DECODE_WHIRLPOOL_AC = _irhvac.DECODE_WHIRLPOOL_AC
SEND_WHIRLPOOL_AC = _irhvac.SEND_WHIRLPOOL_AC
DECODE_LUTRON = _irhvac.DECODE_LUTRON
SEND_LUTRON = _irhvac.SEND_LUTRON
DECODE_ELECTRA_AC = _irhvac.DECODE_ELECTRA_AC
SEND_ELECTRA_AC = _irhvac.SEND_ELECTRA_AC
DECODE_PANASONIC_AC = _irhvac.DECODE_PANASONIC_AC
SEND_PANASONIC_AC = _irhvac.SEND_PANASONIC_AC
DECODE_PANASONIC_AC32 = _irhvac.DECODE_PANASONIC_AC32
SEND_PANASONIC_AC32 = _irhvac.SEND_PANASONIC_AC32
DECODE_MWM = _irhvac.DECODE_MWM
SEND_MWM = _irhvac.SEND_MWM
DECODE_PIONEER = _irhvac.DECODE_PIONEER
SEND_PIONEER = _irhvac.SEND_PIONEER
DECODE_DAIKIN2 = _irhvac.DECODE_DAIKIN2
SEND_DAIKIN2 = _irhvac.SEND_DAIKIN2
DECODE_VESTEL_AC = _irhvac.DECODE_VESTEL_AC
SEND_VESTEL_AC = _irhvac.SEND_VESTEL_AC
DECODE_TECO = _irhvac.DECODE_TECO
SEND_TECO = _irhvac.SEND_TECO
DECODE_TCL96AC = _irhvac.DECODE_TCL96AC
SEND_TCL96AC = _irhvac.SEND_TCL96AC
DECODE_TCL112AC = _irhvac.DECODE_TCL112AC
SEND_TCL112AC = _irhvac.SEND_TCL112AC
DECODE_LEGOPF = _irhvac.DECODE_LEGOPF
SEND_LEGOPF = _irhvac.SEND_LEGOPF
DECODE_MITSUBISHIHEAVY = _irhvac.DECODE_MITSUBISHIHEAVY
SEND_MITSUBISHIHEAVY = _irhvac.SEND_MITSUBISHIHEAVY
DECODE_DAIKIN216 = _irhvac.DECODE_DAIKIN216
SEND_DAIKIN216 = _irhvac.SEND_DAIKIN216
DECODE_DAIKIN160 = _irhvac.DECODE_DAIKIN160
SEND_DAIKIN160 = _irhvac.SEND_DAIKIN160
DECODE_NEOCLIMA = _irhvac.DECODE_NEOCLIMA
SEND_NEOCLIMA = _irhvac.SEND_NEOCLIMA
DECODE_DAIKIN176 = _irhvac.DECODE_DAIKIN176
SEND_DAIKIN176 = _irhvac.SEND_DAIKIN176
DECODE_DAIKIN128 = _irhvac.DECODE_DAIKIN128
SEND_DAIKIN128 = _irhvac.SEND_DAIKIN128
DECODE_AMCOR = _irhvac.DECODE_AMCOR
SEND_AMCOR = _irhvac.SEND_AMCOR
DECODE_DAIKIN152 = _irhvac.DECODE_DAIKIN152
SEND_DAIKIN152 = _irhvac.SEND_DAIKIN152
DECODE_EPSON = _irhvac.DECODE_EPSON
SEND_EPSON = _irhvac.SEND_EPSON
DECODE_SYMPHONY = _irhvac.DECODE_SYMPHONY
SEND_SYMPHONY = _irhvac.SEND_SYMPHONY
DECODE_DAIKIN64 = _irhvac.DECODE_DAIKIN64
SEND_DAIKIN64 = _irhvac.SEND_DAIKIN64
DECODE_AIRWELL = _irhvac.DECODE_AIRWELL
SEND_AIRWELL = _irhvac.SEND_AIRWELL
DECODE_DELONGHI_AC = _irhvac.DECODE_DELONGHI_AC
SEND_DELONGHI_AC = _irhvac.SEND_DELONGHI_AC
DECODE_DOSHISHA = _irhvac.DECODE_DOSHISHA
SEND_DOSHISHA = _irhvac.SEND_DOSHISHA
DECODE_MULTIBRACKETS = _irhvac.DECODE_MULTIBRACKETS
SEND_MULTIBRACKETS = _irhvac.SEND_MULTIBRACKETS
DECODE_TECHNIBEL_AC = _irhvac.DECODE_TECHNIBEL_AC
SEND_TECHNIBEL_AC = _irhvac.SEND_TECHNIBEL_AC
DECODE_CORONA_AC = _irhvac.DECODE_CORONA_AC
SEND_CORONA_AC = _irhvac.SEND_CORONA_AC
DECODE_ZEPEAL = _irhvac.DECODE_ZEPEAL
SEND_ZEPEAL = _irhvac.SEND_ZEPEAL
DECODE_VOLTAS = _irhvac.DECODE_VOLTAS
SEND_VOLTAS = _irhvac.SEND_VOLTAS
DECODE_METZ = _irhvac.DECODE_METZ
SEND_METZ = _irhvac.SEND_METZ
DECODE_TRANSCOLD = _irhvac.DECODE_TRANSCOLD
SEND_TRANSCOLD = _irhvac.SEND_TRANSCOLD
DECODE_MIRAGE = _irhvac.DECODE_MIRAGE
SEND_MIRAGE = _irhvac.SEND_MIRAGE
DECODE_ELITESCREENS = _irhvac.DECODE_ELITESCREENS
SEND_ELITESCREENS = _irhvac.SEND_ELITESCREENS
DECODE_MILESTAG2 = _irhvac.DECODE_MILESTAG2
SEND_MILESTAG2 = _irhvac.SEND_MILESTAG2
DECODE_ECOCLIM = _irhvac.DECODE_ECOCLIM
SEND_ECOCLIM = _irhvac.SEND_ECOCLIM
DECODE_XMP = _irhvac.DECODE_XMP
SEND_XMP = _irhvac.SEND_XMP
DECODE_TRUMA = _irhvac.DECODE_TRUMA
SEND_TRUMA = _irhvac.SEND_TRUMA
DECODE_HAIER_AC176 = _irhvac.DECODE_HAIER_AC176
SEND_HAIER_AC176 = _irhvac.SEND_HAIER_AC176
DECODE_TEKNOPOINT = _irhvac.DECODE_TEKNOPOINT
SEND_TEKNOPOINT = _irhvac.SEND_TEKNOPOINT
DECODE_KELON = _irhvac.DECODE_KELON
SEND_KELON = _irhvac.SEND_KELON
DECODE_BOSE = _irhvac.DECODE_BOSE
SEND_BOSE = _irhvac.SEND_BOSE
DECODE_ARRIS = _irhvac.DECODE_ARRIS
SEND_ARRIS = _irhvac.SEND_ARRIS
DECODE_RHOSS = _irhvac.DECODE_RHOSS
SEND_RHOSS = _irhvac.SEND_RHOSS
DECODE_AIRTON = _irhvac.DECODE_AIRTON
SEND_AIRTON = _irhvac.SEND_AIRTON
DECODE_KELON168 = _irhvac.DECODE_KELON168
SEND_KELON168 = _irhvac.SEND_KELON168
DECODE_DAIKIN200 = _irhvac.DECODE_DAIKIN200
SEND_DAIKIN200 = _irhvac.SEND_DAIKIN200
DECODE_HAIER_AC160 = _irhvac.DECODE_HAIER_AC160
SEND_HAIER_AC160 = _irhvac.SEND_HAIER_AC160
DECODE_TOTO = _irhvac.DECODE_TOTO
SEND_TOTO = _irhvac.SEND_TOTO
DECODE_CLIMABUTLER = _irhvac.DECODE_CLIMABUTLER
SEND_CLIMABUTLER = _irhvac.SEND_CLIMABUTLER
DECODE_BOSCH144 = _irhvac.DECODE_BOSCH144
SEND_BOSCH144 = _irhvac.SEND_BOSCH144
DECODE_DAIKIN312 = _irhvac.DECODE_DAIKIN312
SEND_DAIKIN312 = _irhvac.SEND_DAIKIN312
DECODE_GORENJE = _irhvac.DECODE_GORENJE
SEND_GORENJE = _irhvac.SEND_GORENJE
DECODE_WOWWEE = _irhvac.DECODE_WOWWEE
SEND_WOWWEE = _irhvac.SEND_WOWWEE
DECODE_CARRIER_AC84 = _irhvac.DECODE_CARRIER_AC84
SEND_CARRIER_AC84 = _irhvac.SEND_CARRIER_AC84
DECODE_YORK = _irhvac.DECODE_YORK
SEND_YORK = _irhvac.SEND_YORK
DECODE_AC = _irhvac.DECODE_AC
ALLOW_DELAY_CALLS = _irhvac.ALLOW_DELAY_CALLS
ENABLE_NOISE_FILTER_OPTION = _irhvac.ENABLE_NOISE_FILTER_OPTION
UNKNOWN = _irhvac.UNKNOWN
UNUSED = _irhvac.UNUSED
RC5 = _irhvac.RC5
RC6 = _irhvac.RC6
NEC = _irhvac.NEC
SONY = _irhvac.SONY
PANASONIC = _irhvac.PANASONIC
JVC = _irhvac.JVC
SAMSUNG = _irhvac.SAMSUNG
WHYNTER = _irhvac.WHYNTER
AIWA_RC_T501 = _irhvac.AIWA_RC_T501
LG = _irhvac.LG
SANYO = _irhvac.SANYO
MITSUBISHI = _irhvac.MITSUBISHI
DISH = _irhvac.DISH
SHARP = _irhvac.SHARP
COOLIX = _irhvac.COOLIX
DAIKIN = _irhvac.DAIKIN
DENON = _irhvac.DENON
KELVINATOR = _irhvac.KELVINATOR
SHERWOOD = _irhvac.SHERWOOD
MITSUBISHI_AC = _irhvac.MITSUBISHI_AC
RCMM = _irhvac.RCMM
SANYO_LC7461 = _irhvac.SANYO_LC7461
RC5X = _irhvac.RC5X
GREE = _irhvac.GREE
PRONTO = _irhvac.PRONTO
NEC_LIKE = _irhvac.NEC_LIKE
ARGO = _irhvac.ARGO
TROTEC = _irhvac.TROTEC
NIKAI = _irhvac.NIKAI
RAW = _irhvac.RAW
GLOBALCACHE = _irhvac.GLOBALCACHE
TOSHIBA_AC = _irhvac.TOSHIBA_AC
FUJITSU_AC = _irhvac.FUJITSU_AC
MIDEA = _irhvac.MIDEA
MAGIQUEST = _irhvac.MAGIQUEST
LASERTAG = _irhvac.LASERTAG
CARRIER_AC = _irhvac.CARRIER_AC
HAIER_AC = _irhvac.HAIER_AC
MITSUBISHI2 = _irhvac.MITSUBISHI2
HITACHI_AC = _irhvac.HITACHI_AC
HITACHI_AC1 = _irhvac.HITACHI_AC1
HITACHI_AC2 = _irhvac.HITACHI_AC2
GICABLE = _irhvac.GICABLE
HAIER_AC_YRW02 = _irhvac.HAIER_AC_YRW02
WHIRLPOOL_AC = _irhvac.WHIRLPOOL_AC
SAMSUNG_AC = _irhvac.SAMSUNG_AC
LUTRON = _irhvac.LUTRON
ELECTRA_AC = _irhvac.ELECTRA_AC
PANASONIC_AC = _irhvac.PANASONIC_AC
PIONEER = _irhvac.PIONEER
LG2 = _irhvac.LG2
MWM = _irhvac.MWM
DAIKIN2 = _irhvac.DAIKIN2
VESTEL_AC = _irhvac.VESTEL_AC
TECO = _irhvac.TECO
SAMSUNG36 = _irhvac.SAMSUNG36
TCL112AC = _irhvac.TCL112AC
LEGOPF = _irhvac.LEGOPF
MITSUBISHI_HEAVY_88 = _irhvac.MITSUBISHI_HEAVY_88
MITSUBISHI_HEAVY_152 = _irhvac.MITSUBISHI_HEAVY_152
DAIKIN216 = _irhvac.DAIKIN216
SHARP_AC = _irhvac.SHARP_AC
GOODWEATHER = _irhvac.GOODWEATHER
INAX = _irhvac.INAX
DAIKIN160 = _irhvac.DAIKIN160
NEOCLIMA = _irhvac.NEOCLIMA
DAIKIN176 = _irhvac.DAIKIN176
DAIKIN128 = _irhvac.DAIKIN128
AMCOR = _irhvac.AMCOR
DAIKIN152 = _irhvac.DAIKIN152
MITSUBISHI136 = _irhvac.MITSUBISHI136
MITSUBISHI112 = _irhvac.MITSUBISHI112
HITACHI_AC424 = _irhvac.HITACHI_AC424
SONY_38K = _irhvac.SONY_38K
EPSON = _irhvac.EPSON
SYMPHONY = _irhvac.SYMPHONY
HITACHI_AC3 = _irhvac.HITACHI_AC3
DAIKIN64 = _irhvac.DAIKIN64
AIRWELL = _irhvac.AIRWELL
DELONGHI_AC = _irhvac.DELONGHI_AC
DOSHISHA = _irhvac.DOSHISHA
MULTIBRACKETS = _irhvac.MULTIBRACKETS
CARRIER_AC40 = _irhvac.CARRIER_AC40
CARRIER_AC64 = _irhvac.CARRIER_AC64
HITACHI_AC344 = _irhvac.HITACHI_AC344
CORONA_AC = _irhvac.CORONA_AC
MIDEA24 = _irhvac.MIDEA24
ZEPEAL = _irhvac.ZEPEAL
SANYO_AC = _irhvac.SANYO_AC
VOLTAS = _irhvac.VOLTAS
METZ = _irhvac.METZ
TRANSCOLD = _irhvac.TRANSCOLD
TECHNIBEL_AC = _irhvac.TECHNIBEL_AC
MIRAGE = _irhvac.MIRAGE
ELITESCREENS = _irhvac.ELITESCREENS
PANASONIC_AC32 = _irhvac.PANASONIC_AC32
MILESTAG2 = _irhvac.MILESTAG2
ECOCLIM = _irhvac.ECOCLIM
XMP = _irhvac.XMP
TRUMA = _irhvac.TRUMA
HAIER_AC176 = _irhvac.HAIER_AC176
TEKNOPOINT = _irhvac.TEKNOPOINT
KELON = _irhvac.KELON
TROTEC_3550 = _irhvac.TROTEC_3550
SANYO_AC88 = _irhvac.SANYO_AC88
BOSE = _irhvac.BOSE
ARRIS = _irhvac.ARRIS
RHOSS = _irhvac.RHOSS
AIRTON = _irhvac.AIRTON
COOLIX48 = _irhvac.COOLIX48
HITACHI_AC264 = _irhvac.HITACHI_AC264
KELON168 = _irhvac.KELON168
HITACHI_AC296 = _irhvac.HITACHI_AC296
DAIKIN200 = _irhvac.DAIKIN200
HAIER_AC160 = _irhvac.HAIER_AC160
CARRIER_AC128 = _irhvac.CARRIER_AC128
TOTO = _irhvac.TOTO
CLIMABUTLER = _irhvac.CLIMABUTLER
TCL96AC = _irhvac.TCL96AC
BOSCH144 = _irhvac.BOSCH144
SANYO_AC152 = _irhvac.SANYO_AC152
DAIKIN312 = _irhvac.DAIKIN312
GORENJE = _irhvac.GORENJE
WOWWEE = _irhvac.WOWWEE
CARRIER_AC84 = _irhvac.CARRIER_AC84
YORK = _irhvac.YORK
kLastDecodeType = _irhvac.kLastDecodeType


class IRac(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, pin, inverted=False, use_modulation=True):
        _irhvac.IRac_swiginit(self, _irhvac.new_IRac(pin, inverted, use_modulation))

    @staticmethod
    def isProtocolSupported(protocol):
        return _irhvac.IRac_isProtocolSupported(protocol)

    @staticmethod
    def initState(*args):
        return _irhvac.IRac_initState(*args)

    def markAsSent(self):
        return _irhvac.IRac_markAsSent(self)

    def sendAc(self, *args):
        return _irhvac.IRac_sendAc(self, *args)

    @staticmethod
    def cmpStates(a, b):
        return _irhvac.IRac_cmpStates(a, b)

    @staticmethod
    def strToBool(str, _def=False):
        return _irhvac.IRac_strToBool(str, _def)

    @staticmethod
    def strToModel(str, _def=-1):
        return _irhvac.IRac_strToModel(str, _def)

    @staticmethod
    def strToCommandType(*args):
        return _irhvac.IRac_strToCommandType(*args)

    @staticmethod
    def strToOpmode(*args):
        return _irhvac.IRac_strToOpmode(*args)

    @staticmethod
    def strToFanspeed(*args):
        return _irhvac.IRac_strToFanspeed(*args)

    @staticmethod
    def strToSwingV(*args):
        return _irhvac.IRac_strToSwingV(*args)

    @staticmethod
    def strToSwingH(*args):
        return _irhvac.IRac_strToSwingH(*args)

    @staticmethod
    def boolToString(value):
        return _irhvac.IRac_boolToString(value)

    @staticmethod
    def commandTypeToString(cmdType):
        return _irhvac.IRac_commandTypeToString(cmdType)

    @staticmethod
    def opmodeToString(mode, ha=False):
        return _irhvac.IRac_opmodeToString(mode, ha)

    @staticmethod
    def fanspeedToString(speed):
        return _irhvac.IRac_fanspeedToString(speed)

    @staticmethod
    def swingvToString(swingv):
        return _irhvac.IRac_swingvToString(swingv)

    @staticmethod
    def swinghToString(swingh):
        return _irhvac.IRac_swinghToString(swingh)

    def getState(self):
        return _irhvac.IRac_getState(self)

    def getStatePrev(self):
        return _irhvac.IRac_getStatePrev(self)

    def getTiming(self):
        return _irhvac.IRac_getTiming(self)

    def resetTiming(self):
        return _irhvac.IRac_resetTiming(self)

    def hasStateChanged(self):
        return _irhvac.IRac_hasStateChanged(self)

    next = property(_irhvac.IRac_next_get, _irhvac.IRac_next_set)
    _pin = property(_irhvac.IRac__pin_get, _irhvac.IRac__pin_set)
    _inverted = property(_irhvac.IRac__inverted_get, _irhvac.IRac__inverted_set)
    _modulation = property(_irhvac.IRac__modulation_get, _irhvac.IRac__modulation_set)
    _prev = property(_irhvac.IRac__prev_get, _irhvac.IRac__prev_set)

    def airton(
        self, ac, on, mode, degrees, fan, swingv, turbo, light, econo, filter, sleep=-1
    ):
        return _irhvac.IRac_airton(
            self, ac, on, mode, degrees, fan, swingv, turbo, light, econo, filter, sleep
        )

    def airwell(self, ac, on, mode, degrees, fan):
        return _irhvac.IRac_airwell(self, ac, on, mode, degrees, fan)

    def amcor(self, ac, on, mode, degrees, fan):
        return _irhvac.IRac_amcor(self, ac, on, mode, degrees, fan)

    def argo(
        self, ac, on, mode, degrees, sensorTemp, fan, swingv, iFeel, turbo, sleep=-1
    ):
        return _irhvac.IRac_argo(
            self, ac, on, mode, degrees, sensorTemp, fan, swingv, iFeel, turbo, sleep
        )

    def argoWrem3_ACCommand(
        self,
        ac,
        on,
        mode,
        degrees,
        sensorTemp,
        fan,
        swingv,
        iFeel,
        night,
        econo,
        turbo,
        filter,
        light,
    ):
        return _irhvac.IRac_argoWrem3_ACCommand(
            self,
            ac,
            on,
            mode,
            degrees,
            sensorTemp,
            fan,
            swingv,
            iFeel,
            night,
            econo,
            turbo,
            filter,
            light,
        )

    def argoWrem3_iFeelReport(self, ac, sensorTemp):
        return _irhvac.IRac_argoWrem3_iFeelReport(self, ac, sensorTemp)

    def argoWrem3_ConfigSet(self, ac, param, value, safe=True):
        return _irhvac.IRac_argoWrem3_ConfigSet(self, ac, param, value, safe)

    def argoWrem3_SetTimer(self, ac, on, currentTime, delayMinutes):
        return _irhvac.IRac_argoWrem3_SetTimer(self, ac, on, currentTime, delayMinutes)

    def bosch144(self, ac, on, mode, degrees, fan, quiet):
        return _irhvac.IRac_bosch144(self, ac, on, mode, degrees, fan, quiet)

    def carrier64(self, ac, on, mode, degrees, fan, swingv, sleep=-1):
        return _irhvac.IRac_carrier64(self, ac, on, mode, degrees, fan, swingv, sleep)

    def coolix(
        self,
        ac,
        on,
        mode,
        degrees,
        sensorTemp,
        fan,
        swingv,
        swingh,
        iFeel,
        turbo,
        light,
        clean,
        sleep=-1,
    ):
        return _irhvac.IRac_coolix(
            self,
            ac,
            on,
            mode,
            degrees,
            sensorTemp,
            fan,
            swingv,
            swingh,
            iFeel,
            turbo,
            light,
            clean,
            sleep,
        )

    def corona(self, ac, on, mode, degrees, fan, swingv, econo):
        return _irhvac.IRac_corona(self, ac, on, mode, degrees, fan, swingv, econo)

    def daikin(
        self, ac, on, mode, degrees, fan, swingv, swingh, quiet, turbo, econo, clean
    ):
        return _irhvac.IRac_daikin(
            self, ac, on, mode, degrees, fan, swingv, swingh, quiet, turbo, econo, clean
        )

    def daikin128(
        self,
        ac,
        on,
        mode,
        degrees,
        fan,
        swingv,
        quiet,
        turbo,
        light,
        econo,
        sleep=-1,
        clock=-1,
    ):
        return _irhvac.IRac_daikin128(
            self,
            ac,
            on,
            mode,
            degrees,
            fan,
            swingv,
            quiet,
            turbo,
            light,
            econo,
            sleep,
            clock,
        )

    def daikin152(self, ac, on, mode, degrees, fan, swingv, quiet, turbo, econo):
        return _irhvac.IRac_daikin152(
            self, ac, on, mode, degrees, fan, swingv, quiet, turbo, econo
        )

    def daikin160(self, ac, on, mode, degrees, fan, swingv):
        return _irhvac.IRac_daikin160(self, ac, on, mode, degrees, fan, swingv)

    def daikin176(self, ac, on, mode, degrees, fan, swingh):
        return _irhvac.IRac_daikin176(self, ac, on, mode, degrees, fan, swingh)

    def daikin2(
        self,
        ac,
        on,
        mode,
        degrees,
        fan,
        swingv,
        swingh,
        quiet,
        turbo,
        light,
        econo,
        filter,
        clean,
        beep,
        sleep=-1,
        clock=-1,
    ):
        return _irhvac.IRac_daikin2(
            self,
            ac,
            on,
            mode,
            degrees,
            fan,
            swingv,
            swingh,
            quiet,
            turbo,
            light,
            econo,
            filter,
            clean,
            beep,
            sleep,
            clock,
        )

    def daikin216(self, ac, on, mode, degrees, fan, swingv, swingh, quiet, turbo):
        return _irhvac.IRac_daikin216(
            self, ac, on, mode, degrees, fan, swingv, swingh, quiet, turbo
        )

    def daikin64(
        self, ac, on, mode, degrees, fan, swingv, quiet, turbo, sleep=-1, clock=-1
    ):
        return _irhvac.IRac_daikin64(
            self, ac, on, mode, degrees, fan, swingv, quiet, turbo, sleep, clock
        )

    def delonghiac(self, ac, on, mode, celsius, degrees, fan, turbo, sleep=-1):
        return _irhvac.IRac_delonghiac(
            self, ac, on, mode, celsius, degrees, fan, turbo, sleep
        )

    def ecoclim(self, ac, on, mode, degrees, sensorTemp, fan, sleep=-1, clock=-1):
        return _irhvac.IRac_ecoclim(
            self, ac, on, mode, degrees, sensorTemp, fan, sleep, clock
        )

    def electra(
        self,
        ac,
        on,
        mode,
        degrees,
        sensorTemp,
        fan,
        swingv,
        swingh,
        iFeel,
        quiet,
        turbo,
        lighttoggle,
        clean,
    ):
        return _irhvac.IRac_electra(
            self,
            ac,
            on,
            mode,
            degrees,
            sensorTemp,
            fan,
            swingv,
            swingh,
            iFeel,
            quiet,
            turbo,
            lighttoggle,
            clean,
        )

    def fujitsu(
        self,
        ac,
        model,
        on,
        mode,
        celsius,
        degrees,
        fan,
        swingv,
        swingh,
        quiet,
        turbo,
        econo,
        filter,
        clean,
        sleep=-1,
    ):
        return _irhvac.IRac_fujitsu(
            self,
            ac,
            model,
            on,
            mode,
            celsius,
            degrees,
            fan,
            swingv,
            swingh,
            quiet,
            turbo,
            econo,
            filter,
            clean,
            sleep,
        )

    def goodweather(self, ac, on, mode, degrees, fan, swingv, turbo, light, sleep=-1):
        return _irhvac.IRac_goodweather(
            self, ac, on, mode, degrees, fan, swingv, turbo, light, sleep
        )

    def gree(
        self,
        ac,
        model,
        on,
        mode,
        celsius,
        degrees,
        fan,
        swingv,
        swingh,
        iFeel,
        turbo,
        econo,
        light,
        clean,
        sleep=-1,
    ):
        return _irhvac.IRac_gree(
            self,
            ac,
            model,
            on,
            mode,
            celsius,
            degrees,
            fan,
            swingv,
            swingh,
            iFeel,
            turbo,
            econo,
            light,
            clean,
            sleep,
        )

    def haier(self, ac, on, mode, degrees, fan, swingv, filter, sleep=-1, clock=-1):
        return _irhvac.IRac_haier(
            self, ac, on, mode, degrees, fan, swingv, filter, sleep, clock
        )

    def haier160(
        self,
        ac,
        on,
        mode,
        celsius,
        degrees,
        fan,
        swingv,
        turbo,
        quiet,
        filter,
        clean,
        light,
        prevlight,
        sleep=-1,
    ):
        return _irhvac.IRac_haier160(
            self,
            ac,
            on,
            mode,
            celsius,
            degrees,
            fan,
            swingv,
            turbo,
            quiet,
            filter,
            clean,
            light,
            prevlight,
            sleep,
        )

    def haier176(
        self,
        ac,
        model,
        on,
        mode,
        celsius,
        degrees,
        fan,
        swingv,
        swingh,
        turbo,
        quiet,
        filter,
        sleep=-1,
    ):
        return _irhvac.IRac_haier176(
            self,
            ac,
            model,
            on,
            mode,
            celsius,
            degrees,
            fan,
            swingv,
            swingh,
            turbo,
            quiet,
            filter,
            sleep,
        )

    def haierYrwo2(
        self,
        ac,
        on,
        mode,
        celsius,
        degrees,
        fan,
        swingv,
        swingh,
        turbo,
        quiet,
        filter,
        sleep=-1,
    ):
        return _irhvac.IRac_haierYrwo2(
            self,
            ac,
            on,
            mode,
            celsius,
            degrees,
            fan,
            swingv,
            swingh,
            turbo,
            quiet,
            filter,
            sleep,
        )

    def hitachi(self, ac, on, mode, degrees, fan, swingv, swingh):
        return _irhvac.IRac_hitachi(self, ac, on, mode, degrees, fan, swingv, swingh)

    def hitachi1(
        self,
        ac,
        model,
        on,
        power_toggle,
        mode,
        degrees,
        fan,
        swingv,
        swingh,
        swing_toggle,
        sleep=-1,
    ):
        return _irhvac.IRac_hitachi1(
            self,
            ac,
            model,
            on,
            power_toggle,
            mode,
            degrees,
            fan,
            swingv,
            swingh,
            swing_toggle,
            sleep,
        )

    def hitachi264(self, ac, on, mode, degrees, fan):
        return _irhvac.IRac_hitachi264(self, ac, on, mode, degrees, fan)

    def hitachi296(self, ac, on, mode, degrees, fan):
        return _irhvac.IRac_hitachi296(self, ac, on, mode, degrees, fan)

    def hitachi344(self, ac, on, mode, degrees, fan, swingv, swingh):
        return _irhvac.IRac_hitachi344(self, ac, on, mode, degrees, fan, swingv, swingh)

    def hitachi424(self, ac, on, mode, degrees, fan, swingv):
        return _irhvac.IRac_hitachi424(self, ac, on, mode, degrees, fan, swingv)

    def kelon(
        self,
        ac,
        togglePower,
        mode,
        dryGrade,
        degrees,
        fan,
        toggleSwing,
        superCool,
        sleep,
    ):
        return _irhvac.IRac_kelon(
            self,
            ac,
            togglePower,
            mode,
            dryGrade,
            degrees,
            fan,
            toggleSwing,
            superCool,
            sleep,
        )

    def kelvinator(
        self,
        ac,
        on,
        mode,
        degrees,
        fan,
        swingv,
        swingh,
        quiet,
        turbo,
        light,
        filter,
        clean,
    ):
        return _irhvac.IRac_kelvinator(
            self,
            ac,
            on,
            mode,
            degrees,
            fan,
            swingv,
            swingh,
            quiet,
            turbo,
            light,
            filter,
            clean,
        )

    def lg(self, ac, model, on, mode, degrees, fan, swingv, swingv_prev, swingh, light):
        return _irhvac.IRac_lg(
            self, ac, model, on, mode, degrees, fan, swingv, swingv_prev, swingh, light
        )

    def midea(
        self,
        ac,
        on,
        mode,
        celsius,
        degrees,
        sensorTemp,
        fan,
        swingv,
        iFeel,
        quiet,
        quiet_prev,
        turbo,
        econo,
        light,
        clean,
        sleep=-1,
    ):
        return _irhvac.IRac_midea(
            self,
            ac,
            on,
            mode,
            celsius,
            degrees,
            sensorTemp,
            fan,
            swingv,
            iFeel,
            quiet,
            quiet_prev,
            turbo,
            econo,
            light,
            clean,
            sleep,
        )

    def mirage(self, ac, state):
        return _irhvac.IRac_mirage(self, ac, state)

    def mitsubishi(self, ac, on, mode, degrees, fan, swingv, swingh, quiet, clock=-1):
        return _irhvac.IRac_mitsubishi(
            self, ac, on, mode, degrees, fan, swingv, swingh, quiet, clock
        )

    def mitsubishi112(self, ac, on, mode, degrees, fan, swingv, swingh, quiet):
        return _irhvac.IRac_mitsubishi112(
            self, ac, on, mode, degrees, fan, swingv, swingh, quiet
        )

    def mitsubishi136(self, ac, on, mode, degrees, fan, swingv, quiet):
        return _irhvac.IRac_mitsubishi136(
            self, ac, on, mode, degrees, fan, swingv, quiet
        )

    def mitsubishiHeavy88(
        self, ac, on, mode, degrees, fan, swingv, swingh, turbo, econo, clean
    ):
        return _irhvac.IRac_mitsubishiHeavy88(
            self, ac, on, mode, degrees, fan, swingv, swingh, turbo, econo, clean
        )

    def mitsubishiHeavy152(
        self,
        ac,
        on,
        mode,
        degrees,
        fan,
        swingv,
        swingh,
        quiet,
        turbo,
        econo,
        filter,
        clean,
        sleep=-1,
    ):
        return _irhvac.IRac_mitsubishiHeavy152(
            self,
            ac,
            on,
            mode,
            degrees,
            fan,
            swingv,
            swingh,
            quiet,
            turbo,
            econo,
            filter,
            clean,
            sleep,
        )

    def neoclima(
        self,
        ac,
        on,
        mode,
        celsius,
        degrees,
        fan,
        swingv,
        swingh,
        turbo,
        econo,
        light,
        filter,
        sleep=-1,
    ):
        return _irhvac.IRac_neoclima(
            self,
            ac,
            on,
            mode,
            celsius,
            degrees,
            fan,
            swingv,
            swingh,
            turbo,
            econo,
            light,
            filter,
            sleep,
        )

    def panasonic(
        self,
        ac,
        model,
        on,
        mode,
        degrees,
        fan,
        swingv,
        swingh,
        quiet,
        turbo,
        filter,
        clock=-1,
    ):
        return _irhvac.IRac_panasonic(
            self,
            ac,
            model,
            on,
            mode,
            degrees,
            fan,
            swingv,
            swingh,
            quiet,
            turbo,
            filter,
            clock,
        )

    def panasonic32(self, ac, on, mode, degrees, fan, swingv, swingh):
        return _irhvac.IRac_panasonic32(
            self, ac, on, mode, degrees, fan, swingv, swingh
        )

    def rhoss(self, ac, on, mode, degrees, fan, swing):
        return _irhvac.IRac_rhoss(self, ac, on, mode, degrees, fan, swing)

    def samsung(
        self,
        ac,
        on,
        mode,
        degrees,
        fan,
        swingv,
        swingh,
        quiet,
        turbo,
        econo,
        light,
        filter,
        clean,
        beep,
        sleep=-1,
        prevpower=True,
        prevsleep=-1,
        forceextended=True,
    ):
        return _irhvac.IRac_samsung(
            self,
            ac,
            on,
            mode,
            degrees,
            fan,
            swingv,
            swingh,
            quiet,
            turbo,
            econo,
            light,
            filter,
            clean,
            beep,
            sleep,
            prevpower,
            prevsleep,
            forceextended,
        )

    def sanyo(
        self, ac, on, mode, degrees, sensorTemp, fan, swingv, iFeel, beep, sleep=-1
    ):
        return _irhvac.IRac_sanyo(
            self, ac, on, mode, degrees, sensorTemp, fan, swingv, iFeel, beep, sleep
        )

    def sanyo88(
        self, ac, on, mode, degrees, fan, swingv, turbo, filter, sleep=-1, clock=-1
    ):
        return _irhvac.IRac_sanyo88(
            self, ac, on, mode, degrees, fan, swingv, turbo, filter, sleep, clock
        )

    def sharp(
        self,
        ac,
        model,
        on,
        prev_power,
        mode,
        degrees,
        fan,
        swingv,
        swingv_prev,
        turbo,
        light,
        filter,
        clean,
    ):
        return _irhvac.IRac_sharp(
            self,
            ac,
            model,
            on,
            prev_power,
            mode,
            degrees,
            fan,
            swingv,
            swingv_prev,
            turbo,
            light,
            filter,
            clean,
        )

    def tcl112(
        self,
        ac,
        model,
        on,
        mode,
        degrees,
        fan,
        swingv,
        swingh,
        quiet,
        turbo,
        light,
        econo,
        filter,
    ):
        return _irhvac.IRac_tcl112(
            self,
            ac,
            model,
            on,
            mode,
            degrees,
            fan,
            swingv,
            swingh,
            quiet,
            turbo,
            light,
            econo,
            filter,
        )

    def technibel(self, ac, on, mode, celsius, degrees, fan, swingv, sleep=-1):
        return _irhvac.IRac_technibel(
            self, ac, on, mode, celsius, degrees, fan, swingv, sleep
        )

    def teco(self, ac, on, mode, degrees, fan, swingv, light, sleep=-1):
        return _irhvac.IRac_teco(self, ac, on, mode, degrees, fan, swingv, light, sleep)

    def toshiba(self, ac, on, mode, degrees, fan, swingv, turbo, econo, filter):
        return _irhvac.IRac_toshiba(
            self, ac, on, mode, degrees, fan, swingv, turbo, econo, filter
        )

    def trotec(self, ac, on, mode, degrees, fan, sleep=-1):
        return _irhvac.IRac_trotec(self, ac, on, mode, degrees, fan, sleep)

    def trotec3550(self, ac, on, mode, celsius, degrees, fan, swingv):
        return _irhvac.IRac_trotec3550(
            self, ac, on, mode, celsius, degrees, fan, swingv
        )

    def truma(self, ac, on, mode, degrees, fan, quiet):
        return _irhvac.IRac_truma(self, ac, on, mode, degrees, fan, quiet)

    def vestel(
        self,
        ac,
        on,
        mode,
        degrees,
        fan,
        swingv,
        turbo,
        filter,
        sleep=-1,
        clock=-1,
        sendNormal=True,
    ):
        return _irhvac.IRac_vestel(
            self,
            ac,
            on,
            mode,
            degrees,
            fan,
            swingv,
            turbo,
            filter,
            sleep,
            clock,
            sendNormal,
        )

    def voltas(
        self,
        ac,
        model,
        on,
        mode,
        degrees,
        fan,
        swingv,
        swingh,
        turbo,
        econo,
        light,
        sleep=-1,
    ):
        return _irhvac.IRac_voltas(
            self,
            ac,
            model,
            on,
            mode,
            degrees,
            fan,
            swingv,
            swingh,
            turbo,
            econo,
            light,
            sleep,
        )

    def whirlpool(
        self,
        ac,
        model,
        on,
        mode,
        degrees,
        fan,
        swingv,
        turbo,
        light,
        sleep=-1,
        clock=-1,
    ):
        return _irhvac.IRac_whirlpool(
            self, ac, model, on, mode, degrees, fan, swingv, turbo, light, sleep, clock
        )

    def transcold(self, ac, on, mode, degrees, fan, swingv, swingh):
        return _irhvac.IRac_transcold(self, ac, on, mode, degrees, fan, swingv, swingh)

    @staticmethod
    def cleanState(state):
        return _irhvac.IRac_cleanState(state)

    @staticmethod
    def handleToggles(desired, prev=None):
        return _irhvac.IRac_handleToggles(desired, prev)

    __swig_destroy__ = _irhvac.delete_IRac


# Register IRac in _irhvac:
_irhvac.IRac_swigregister(IRac)
kNoRepeat = cvar.kNoRepeat
kSingleRepeat = cvar.kSingleRepeat
kAirtonBits = cvar.kAirtonBits
kAirtonDefaultRepeat = cvar.kAirtonDefaultRepeat
kAirwellBits = cvar.kAirwellBits
kAirwellMinRepeats = cvar.kAirwellMinRepeats
kAiwaRcT501Bits = cvar.kAiwaRcT501Bits
kAiwaRcT501MinRepeats = cvar.kAiwaRcT501MinRepeats
kAlokaBits = cvar.kAlokaBits
kAmcorStateLength = cvar.kAmcorStateLength
kAmcorBits = cvar.kAmcorBits
kAmcorDefaultRepeat = cvar.kAmcorDefaultRepeat
kArgoStateLength = cvar.kArgoStateLength
kArgoShortStateLength = cvar.kArgoShortStateLength
kArgoBits = cvar.kArgoBits
kArgoShortBits = cvar.kArgoShortBits
kArgo3AcControlStateLength = cvar.kArgo3AcControlStateLength
kArgo3iFeelReportStateLength = cvar.kArgo3iFeelReportStateLength
kArgo3TimerStateLength = cvar.kArgo3TimerStateLength
kArgo3ConfigStateLength = cvar.kArgo3ConfigStateLength
kArgoDefaultRepeat = cvar.kArgoDefaultRepeat
kArrisBits = cvar.kArrisBits
kBosch144StateLength = cvar.kBosch144StateLength
kBosch144Bits = cvar.kBosch144Bits
kCoolixBits = cvar.kCoolixBits
kCoolix48Bits = cvar.kCoolix48Bits
kCoolixDefaultRepeat = cvar.kCoolixDefaultRepeat
kCarrierAcBits = cvar.kCarrierAcBits
kCarrierAcMinRepeat = cvar.kCarrierAcMinRepeat
kCarrierAc40Bits = cvar.kCarrierAc40Bits
kCarrierAc40MinRepeat = cvar.kCarrierAc40MinRepeat
kCarrierAc64Bits = cvar.kCarrierAc64Bits
kCarrierAc64MinRepeat = cvar.kCarrierAc64MinRepeat
kCarrierAc84StateLength = cvar.kCarrierAc84StateLength
kCarrierAc84Bits = cvar.kCarrierAc84Bits
kCarrierAc84MinRepeat = cvar.kCarrierAc84MinRepeat
kCarrierAc128StateLength = cvar.kCarrierAc128StateLength
kCarrierAc128Bits = cvar.kCarrierAc128Bits
kCarrierAc128MinRepeat = cvar.kCarrierAc128MinRepeat
kCoronaAcStateLengthShort = cvar.kCoronaAcStateLengthShort
kCoronaAcStateLength = cvar.kCoronaAcStateLength
kCoronaAcBitsShort = cvar.kCoronaAcBitsShort
kCoronaAcBits = cvar.kCoronaAcBits
kDaikinStateLength = cvar.kDaikinStateLength
kDaikinBits = cvar.kDaikinBits
kDaikinStateLengthShort = cvar.kDaikinStateLengthShort
kDaikinBitsShort = cvar.kDaikinBitsShort
kDaikinDefaultRepeat = cvar.kDaikinDefaultRepeat
kDaikin2StateLength = cvar.kDaikin2StateLength
kDaikin2Bits = cvar.kDaikin2Bits
kDaikin2DefaultRepeat = cvar.kDaikin2DefaultRepeat
kDaikin64Bits = cvar.kDaikin64Bits
kDaikin64DefaultRepeat = cvar.kDaikin64DefaultRepeat
kDaikin160StateLength = cvar.kDaikin160StateLength
kDaikin160Bits = cvar.kDaikin160Bits
kDaikin160DefaultRepeat = cvar.kDaikin160DefaultRepeat
kDaikin128StateLength = cvar.kDaikin128StateLength
kDaikin128Bits = cvar.kDaikin128Bits
kDaikin128DefaultRepeat = cvar.kDaikin128DefaultRepeat
kDaikin152StateLength = cvar.kDaikin152StateLength
kDaikin152Bits = cvar.kDaikin152Bits
kDaikin152DefaultRepeat = cvar.kDaikin152DefaultRepeat
kDaikin176StateLength = cvar.kDaikin176StateLength
kDaikin176Bits = cvar.kDaikin176Bits
kDaikin176DefaultRepeat = cvar.kDaikin176DefaultRepeat
kDaikin200StateLength = cvar.kDaikin200StateLength
kDaikin200Bits = cvar.kDaikin200Bits
kDaikin200DefaultRepeat = cvar.kDaikin200DefaultRepeat
kDaikin216StateLength = cvar.kDaikin216StateLength
kDaikin216Bits = cvar.kDaikin216Bits
kDaikin216DefaultRepeat = cvar.kDaikin216DefaultRepeat
kDaikin312StateLength = cvar.kDaikin312StateLength
kDaikin312Bits = cvar.kDaikin312Bits
kDaikin312DefaultRepeat = cvar.kDaikin312DefaultRepeat
kDelonghiAcBits = cvar.kDelonghiAcBits
kDelonghiAcDefaultRepeat = cvar.kDelonghiAcDefaultRepeat
kTechnibelAcBits = cvar.kTechnibelAcBits
kTechnibelAcDefaultRepeat = cvar.kTechnibelAcDefaultRepeat
kDenonBits = cvar.kDenonBits
kDenon48Bits = cvar.kDenon48Bits
kDenonLegacyBits = cvar.kDenonLegacyBits
kDishBits = cvar.kDishBits
kDishMinRepeat = cvar.kDishMinRepeat
kDoshishaBits = cvar.kDoshishaBits
kEcoclimBits = cvar.kEcoclimBits
kEcoclimShortBits = cvar.kEcoclimShortBits
kEpsonBits = cvar.kEpsonBits
kEpsonMinRepeat = cvar.kEpsonMinRepeat
kElectraAcStateLength = cvar.kElectraAcStateLength
kElectraAcBits = cvar.kElectraAcBits
kElectraAcMinRepeat = cvar.kElectraAcMinRepeat
kEliteScreensBits = cvar.kEliteScreensBits
kEliteScreensDefaultRepeat = cvar.kEliteScreensDefaultRepeat
kFujitsuAcMinRepeat = cvar.kFujitsuAcMinRepeat
kFujitsuAcStateLength = cvar.kFujitsuAcStateLength
kFujitsuAcStateLengthShort = cvar.kFujitsuAcStateLengthShort
kFujitsuAcBits = cvar.kFujitsuAcBits
kFujitsuAcMinBits = cvar.kFujitsuAcMinBits
kGicableBits = cvar.kGicableBits
kGicableMinRepeat = cvar.kGicableMinRepeat
kGoodweatherBits = cvar.kGoodweatherBits
kGoodweatherMinRepeat = cvar.kGoodweatherMinRepeat
kGorenjeBits = cvar.kGorenjeBits
kGreeStateLength = cvar.kGreeStateLength
kGreeBits = cvar.kGreeBits
kGreeDefaultRepeat = cvar.kGreeDefaultRepeat
kHaierACStateLength = cvar.kHaierACStateLength
kHaierACBits = cvar.kHaierACBits
kHaierAcDefaultRepeat = cvar.kHaierAcDefaultRepeat
kHaierACYRW02StateLength = cvar.kHaierACYRW02StateLength
kHaierACYRW02Bits = cvar.kHaierACYRW02Bits
kHaierAcYrw02DefaultRepeat = cvar.kHaierAcYrw02DefaultRepeat
kHaierAC160StateLength = cvar.kHaierAC160StateLength
kHaierAC160Bits = cvar.kHaierAC160Bits
kHaierAc160DefaultRepeat = cvar.kHaierAc160DefaultRepeat
kHaierAC176StateLength = cvar.kHaierAC176StateLength
kHaierAC176Bits = cvar.kHaierAC176Bits
kHaierAc176DefaultRepeat = cvar.kHaierAc176DefaultRepeat
kHitachiAcStateLength = cvar.kHitachiAcStateLength
kHitachiAcBits = cvar.kHitachiAcBits
kHitachiAcDefaultRepeat = cvar.kHitachiAcDefaultRepeat
kHitachiAc1StateLength = cvar.kHitachiAc1StateLength
kHitachiAc1Bits = cvar.kHitachiAc1Bits
kHitachiAc2StateLength = cvar.kHitachiAc2StateLength
kHitachiAc2Bits = cvar.kHitachiAc2Bits
kHitachiAc3StateLength = cvar.kHitachiAc3StateLength
kHitachiAc3Bits = cvar.kHitachiAc3Bits
kHitachiAc3MinStateLength = cvar.kHitachiAc3MinStateLength
kHitachiAc3MinBits = cvar.kHitachiAc3MinBits
kHitachiAc264StateLength = cvar.kHitachiAc264StateLength
kHitachiAc264Bits = cvar.kHitachiAc264Bits
kHitachiAc296StateLength = cvar.kHitachiAc296StateLength
kHitachiAc296Bits = cvar.kHitachiAc296Bits
kHitachiAc344StateLength = cvar.kHitachiAc344StateLength
kHitachiAc344Bits = cvar.kHitachiAc344Bits
kHitachiAc424StateLength = cvar.kHitachiAc424StateLength
kHitachiAc424Bits = cvar.kHitachiAc424Bits
kInaxBits = cvar.kInaxBits
kInaxMinRepeat = cvar.kInaxMinRepeat
kJvcBits = cvar.kJvcBits
kKelonBits = cvar.kKelonBits
kKelon168StateLength = cvar.kKelon168StateLength
kKelon168Bits = cvar.kKelon168Bits
kKelvinatorStateLength = cvar.kKelvinatorStateLength
kKelvinatorBits = cvar.kKelvinatorBits
kKelvinatorDefaultRepeat = cvar.kKelvinatorDefaultRepeat
kLasertagBits = cvar.kLasertagBits
kLasertagMinRepeat = cvar.kLasertagMinRepeat
kLegoPfBits = cvar.kLegoPfBits
kLegoPfMinRepeat = cvar.kLegoPfMinRepeat
kLgBits = cvar.kLgBits
kLg32Bits = cvar.kLg32Bits
kLgDefaultRepeat = cvar.kLgDefaultRepeat
kLutronBits = cvar.kLutronBits
kMagiquestBits = cvar.kMagiquestBits
kMetzBits = cvar.kMetzBits
kMetzMinRepeat = cvar.kMetzMinRepeat
kMideaBits = cvar.kMideaBits
kMideaMinRepeat = cvar.kMideaMinRepeat
kMidea24Bits = cvar.kMidea24Bits
kMidea24MinRepeat = cvar.kMidea24MinRepeat
kMirageStateLength = cvar.kMirageStateLength
kMirageBits = cvar.kMirageBits
kMirageMinRepeat = cvar.kMirageMinRepeat
kMitsubishiBits = cvar.kMitsubishiBits
kMitsubishiMinRepeat = cvar.kMitsubishiMinRepeat
kMitsubishiACStateLength = cvar.kMitsubishiACStateLength
kMitsubishiACBits = cvar.kMitsubishiACBits
kMitsubishiACMinRepeat = cvar.kMitsubishiACMinRepeat
kMitsubishi136StateLength = cvar.kMitsubishi136StateLength
kMitsubishi136Bits = cvar.kMitsubishi136Bits
kMitsubishi136MinRepeat = cvar.kMitsubishi136MinRepeat
kMitsubishi112StateLength = cvar.kMitsubishi112StateLength
kMitsubishi112Bits = cvar.kMitsubishi112Bits
kMitsubishi112MinRepeat = cvar.kMitsubishi112MinRepeat
kMitsubishiHeavy88StateLength = cvar.kMitsubishiHeavy88StateLength
kMitsubishiHeavy88Bits = cvar.kMitsubishiHeavy88Bits
kMitsubishiHeavy88MinRepeat = cvar.kMitsubishiHeavy88MinRepeat
kMitsubishiHeavy152StateLength = cvar.kMitsubishiHeavy152StateLength
kMitsubishiHeavy152Bits = cvar.kMitsubishiHeavy152Bits
kMitsubishiHeavy152MinRepeat = cvar.kMitsubishiHeavy152MinRepeat
kMultibracketsBits = cvar.kMultibracketsBits
kMultibracketsDefaultRepeat = cvar.kMultibracketsDefaultRepeat
kNikaiBits = cvar.kNikaiBits
kNECBits = cvar.kNECBits
kNeoclimaStateLength = cvar.kNeoclimaStateLength
kNeoclimaBits = cvar.kNeoclimaBits
kNeoclimaMinRepeat = cvar.kNeoclimaMinRepeat
kPanasonicBits = cvar.kPanasonicBits
kPanasonicManufacturer = cvar.kPanasonicManufacturer
kPanasonic40Manufacturer = cvar.kPanasonic40Manufacturer
kPanasonic40Bits = cvar.kPanasonic40Bits
kPanasonicAcStateLength = cvar.kPanasonicAcStateLength
kPanasonicAcStateShortLength = cvar.kPanasonicAcStateShortLength
kPanasonicAcBits = cvar.kPanasonicAcBits
kPanasonicAcShortBits = cvar.kPanasonicAcShortBits
kPanasonicAcDefaultRepeat = cvar.kPanasonicAcDefaultRepeat
kPanasonicAc32Bits = cvar.kPanasonicAc32Bits
kPioneerBits = cvar.kPioneerBits
kProntoMinLength = cvar.kProntoMinLength
kRC5RawBits = cvar.kRC5RawBits
kRC5Bits = cvar.kRC5Bits
kRC5XBits = cvar.kRC5XBits
kRC6Mode0Bits = cvar.kRC6Mode0Bits
kRC6_36Bits = cvar.kRC6_36Bits
kRCMMBits = cvar.kRCMMBits
kSamsungBits = cvar.kSamsungBits
kSamsung36Bits = cvar.kSamsung36Bits
kSamsungAcStateLength = cvar.kSamsungAcStateLength
kSamsungAcBits = cvar.kSamsungAcBits
kSamsungAcExtendedStateLength = cvar.kSamsungAcExtendedStateLength
kSamsungAcExtendedBits = cvar.kSamsungAcExtendedBits
kSamsungAcDefaultRepeat = cvar.kSamsungAcDefaultRepeat
kSanyoAcStateLength = cvar.kSanyoAcStateLength
kSanyoAcBits = cvar.kSanyoAcBits
kSanyoAc88StateLength = cvar.kSanyoAc88StateLength
kSanyoAc88Bits = cvar.kSanyoAc88Bits
kSanyoAc88MinRepeat = cvar.kSanyoAc88MinRepeat
kSanyoAc152StateLength = cvar.kSanyoAc152StateLength
kSanyoAc152Bits = cvar.kSanyoAc152Bits
kSanyoAc152MinRepeat = cvar.kSanyoAc152MinRepeat
kSanyoSA8650BBits = cvar.kSanyoSA8650BBits
kSanyoLC7461AddressBits = cvar.kSanyoLC7461AddressBits
kSanyoLC7461CommandBits = cvar.kSanyoLC7461CommandBits
kSanyoLC7461Bits = cvar.kSanyoLC7461Bits
kSharpAddressBits = cvar.kSharpAddressBits
kSharpCommandBits = cvar.kSharpCommandBits
kSharpBits = cvar.kSharpBits
kSharpAcStateLength = cvar.kSharpAcStateLength
kSharpAcBits = cvar.kSharpAcBits
kSharpAcDefaultRepeat = cvar.kSharpAcDefaultRepeat
kSherwoodBits = cvar.kSherwoodBits
kSherwoodMinRepeat = cvar.kSherwoodMinRepeat
kSony12Bits = cvar.kSony12Bits
kSony15Bits = cvar.kSony15Bits
kSony20Bits = cvar.kSony20Bits
kSonyMinBits = cvar.kSonyMinBits
kSonyMinRepeat = cvar.kSonyMinRepeat
kSymphonyBits = cvar.kSymphonyBits
kSymphonyDefaultRepeat = cvar.kSymphonyDefaultRepeat
kTcl96AcStateLength = cvar.kTcl96AcStateLength
kTcl96AcBits = cvar.kTcl96AcBits
kTcl96AcDefaultRepeat = cvar.kTcl96AcDefaultRepeat
kTcl112AcStateLength = cvar.kTcl112AcStateLength
kTcl112AcBits = cvar.kTcl112AcBits
kTcl112AcDefaultRepeat = cvar.kTcl112AcDefaultRepeat
kTecoBits = cvar.kTecoBits
kTecoDefaultRepeat = cvar.kTecoDefaultRepeat
kTeknopointStateLength = cvar.kTeknopointStateLength
kTeknopointBits = cvar.kTeknopointBits
kToshibaACStateLength = cvar.kToshibaACStateLength
kToshibaACBits = cvar.kToshibaACBits
kToshibaACMinRepeat = cvar.kToshibaACMinRepeat
kToshibaACStateLengthShort = cvar.kToshibaACStateLengthShort
kToshibaACBitsShort = cvar.kToshibaACBitsShort
kToshibaACStateLengthLong = cvar.kToshibaACStateLengthLong
kToshibaACBitsLong = cvar.kToshibaACBitsLong
kTotoBits = cvar.kTotoBits
kTotoShortBits = cvar.kTotoShortBits
kTotoLongBits = cvar.kTotoLongBits
kTotoDefaultRepeat = cvar.kTotoDefaultRepeat
kTranscoldBits = cvar.kTranscoldBits
kTranscoldDefaultRepeat = cvar.kTranscoldDefaultRepeat
kTrotecStateLength = cvar.kTrotecStateLength
kTrotecBits = cvar.kTrotecBits
kTrotecDefaultRepeat = cvar.kTrotecDefaultRepeat
kTrumaBits = cvar.kTrumaBits
kWhirlpoolAcStateLength = cvar.kWhirlpoolAcStateLength
kWhirlpoolAcBits = cvar.kWhirlpoolAcBits
kWhirlpoolAcDefaultRepeat = cvar.kWhirlpoolAcDefaultRepeat
kWhynterBits = cvar.kWhynterBits
kWowweeBits = cvar.kWowweeBits
kWowweeDefaultRepeat = cvar.kWowweeDefaultRepeat
kVestelAcBits = cvar.kVestelAcBits
kXmpBits = cvar.kXmpBits
kZepealBits = cvar.kZepealBits
kZepealMinRepeat = cvar.kZepealMinRepeat
kVoltasBits = cvar.kVoltasBits
kVoltasStateLength = cvar.kVoltasStateLength
kMilesTag2ShotBits = cvar.kMilesTag2ShotBits
kMilesTag2MsgBits = cvar.kMilesTag2MsgBits
kMilesMinRepeat = cvar.kMilesMinRepeat
kBoseBits = cvar.kBoseBits
kRhossStateLength = cvar.kRhossStateLength
kRhossBits = cvar.kRhossBits
kRhossDefaultRepeat = cvar.kRhossDefaultRepeat
kClimaButlerBits = cvar.kClimaButlerBits
kYorkBits = cvar.kYorkBits
kYorkStateLength = cvar.kYorkStateLength
kGpioUnused = cvar.kGpioUnused


def resultAcToString(results):
    return _irhvac.resultAcToString(results)


def decodeToState(decode, result, prev=None):
    return _irhvac.decodeToState(decode, result, prev)
